# template.yaml
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: nodejs-service-template
  title: Node.js Service with Jenkins CI/CD
  description: Creates a new Node.js service with a pre-configured Jenkinsfile.
spec:
  owner: rhdh
  type: service
  parameters:
    - title: Basic Information
      properties:
        name:
          title: Project Name
          type: string
          description: Unique name of the service.
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: A brief description of the service.
        owner:
          title: Owner
          type: string
          description: Owner of the new component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: [ 'Group' ]
    - title: Application repository Information
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: gitlab-gitlab.apps.cluster-bhk9g.bhk9g.sandbox2098.opentlc.com
              enum:
                - gitlab-gitlab.apps.cluster-bhk9g.bhk9g.sandbox2098.opentlc.com
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: parasol
              enum:
                - parasol
  steps:
    - id: fetch-base
      name: Fetch Base Skeleton
      action: fetch:template
      input:
        url: ./skeleton # Your template skeleton directory containing the Jenkinsfile

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{ parameters.name }}"
        repoVisibility: public

    - id: create-jenkins-job # This is where your jenkins:job:create action comes in!
      name: Create Jenkins CI Job
      action: jenkins:job:create # This action needs to be registered in your Backstage backend
      input:
        jobName: '${{ parameters.name }}'
        # The 'repoUrl' or 'gitSource' would tell Jenkins where to find the Jenkinsfile
        # The exact parameters depend on your `jenkins:job:create` action implementation
        gitSource:
          repo: '${{ parameters.repo.host }}'
          owner: '${{ parameters.repo.owner }}'
          # You might also pass a specific Jenkinsfile path if it's not at the root
          # jenkinsfilePath: 'cicd/Jenkinsfile'
        # Any other parameters needed to create the Jenkins job, e.g., credentials,
        # Jenkins instance URL (if you have multiple and the action supports it)
        # jenkinsInstance: 'your-jenkins-instance-id'

    - id: register
      name: Register Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml' # Path to the Backstage catalog-info.yaml within the repo

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: Open in Jenkins # Link directly to the newly created Jenkins job
        url: 'https://jenkins-jenkins.apps.cluster-bhk9g.bhk9g.sandbox2098.opentlc.com/job/${{ parameters.name }}' # Adjust this URL
