# template.yaml
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: dotnet-frontend-template
  title: Create a .NET Frontend application in github DevOps with a CI pipeline
  description: Create a starter .NET frontend application with a CI pipeline
  tags:
    - jenkins
    - dotnet
spec:
  owner: rhdh
  type: service
  parameters:
    - title: Choose a location
      required:
        - orgName
        - projectName
        - repoName
      properties:
        orgName:
          title: Organization
          type: string
          description: The Organization that this repo will belong to
        projectName:
          title: Project
          type: string
          description: The Project that this repo will belong to
        repoName:
          title: Repository
          type: string
          description: The name of the repository

    - title: Provide information about the new component
      required:
        - owner
        - system
        - port
      properties:
        title:
          title: Title
          type: string
          description: The title of the component
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        owner:
          title: Owner
          type: string
          description: The owner of the component
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User
        system:
          title: System
          type: string
          description: The system that the component belongs to
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - System
        port:
          title: Port
          type: number
          default: 5000
          description: Override the port exposed for the application
  steps:

    - id: sourceCodeTemplate
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          orgName: ${{ parameters.projectName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          title: ${{ parameters.title }}
          description: ${{ parameters.description }}
          port: ${{ parameters.port }}
          applicationType: website
          sourceControl: github.com

    - id: create-jenkins-job # This is where your jenkins:job:create action comes in!
      name: Create Jenkins CI Job
      action: jenkins:job:create # This action needs to be registered in your Backstage backend
      input:
        jobName: '${{ parameters.projectName }}'
        # The 'repoUrl' or 'gitSource' would tell Jenkins where to find the Jenkinsfile
        # The exact parameters depend on your `jenkins:job:create` action implementation
        gitSource:
          repo: 'github.com'
          owner: '${{ parameters.owner }}'
          # You might also pass a specific Jenkinsfile path if it's not at the root
        jenkinsfilePath: 'Jenkinsfile'
        configPath: 'config.xml'
        folderName: test-folder
        # Any other parameters needed to create the Jenkins job, e.g., credentials,
        # Jenkins instance URL (if you have multiple and the action supports it)
        # jenkinsInstance: 'your-jenkins-instance-id'

    - id: catalogTemplate
      name: Generating the Catalog Info Component
      action: fetch:template
      input:
        url: ./skeletons/catalog-info/
        values:
          # github devops uses `my-project/my-repo`
          orgName: ${{ parameters.projectName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          title: ${{ parameters.title }}
          description: ${{ parameters.description }}
          port: ${{ parameters.port }}
          applicationType: website
          sourceControl: github.com

    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.projectName }}&repo=${{ parameters.repoName }}&organization=${{ parameters.orgName }}
        defaultBranch: main

    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
      - title: Open in Jenkins # Link directly to the newly created Jenkins job
        url: 'https://jenkins-jenkins.apps.rosa.jo6zn-nx6oh-x9g.fvw3.p3.openshiftapps.com/job/${{ parameters.name }}' # Adjust this URL
