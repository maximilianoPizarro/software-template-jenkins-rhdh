// Jenkinsfile para construir y desplegar una aplicación .NET en OpenShift
// Este pipeline asume que Jenkins está configurado con acceso a un cluster OpenShift
// y que la CLI de OpenShift (oc) está disponible en el agente de Jenkins.

pipeline {
    agent any // Define que el pipeline puede ejecutarse en cualquier agente disponible

    // Parámetros configurables para el pipeline
    parameters {
        string(name: 'OPENSHIFT_PROJECT', defaultValue: 'my-dotnet-app-dev', description: 'Nombre del proyecto de OpenShift donde se desplegará la aplicación.')
        string(name: 'APP_NAME', defaultValue: 'dotnet-app', description: 'Nombre de la aplicación y del ImageStream/DeploymentConfig.')
        string(name: 'DOCKERFILE_PATH', defaultValue: 'app/Dockerfile', description: 'Ruta al Dockerfile dentro del repositorio.')
        string(name: 'DOTNET_PROJECT_PATH', defaultValue: 'app/app.csproj', description: 'Ruta al archivo .csproj principal de la aplicación.')
    }

    stages {
        stage('Checkout SCM') {
            steps {
                // Clona el repositorio de Git.
                // Asegúrate de que las credenciales de Git estén configuradas en Jenkins si el repositorio es privado.
                git branch: 'main', url: 'https://${{ values.sourceControl }}/${{ values.orgName }}/${{ values.repoName }}'
            }
        }

        stage('Build .NET Application') {
            steps {
                script {
                    // Navega al directorio de la aplicación
                    dir('skeleton/app') {
                        // Restaura las dependencias de .NET
                        sh 'dotnet restore'
                        // Publica la aplicación para producción.
                        // --no-restore: No restaura los paquetes (ya se hizo).
                        // -c Release: Construye en modo Release.
                        // -o ./publish: Publica los archivos en el directorio 'publish'.
                        sh 'dotnet publish --no-restore -c Release -o ./publish'
                    }
                }
            }
        }

        stage('Login to OpenShift') {
            steps {
                script {
                    // Asegúrate de que el agente de Jenkins tenga la CLI de OpenShift (oc) instalada y configurada.
                    // Se asume que ya hay un token de OpenShift o que el agente puede autenticarse.
                    // Para autenticación con token: oc login --token=<your_token> --server=<your_openshift_api_url>
                    // Para autenticación con kubeconfig: oc login --kubeconfig=<path_to_kubeconfig>
                    // Para este ejemplo, asumimos que el login ya está manejado por el entorno de Jenkins o un plugin.
                    // Si necesitas un login explícito, descomenta y configura la siguiente línea:
                    // sh "oc login --token=${OPENSHIFT_TOKEN} --server=${OPENSHIFT_API_URL}"
                    sh "oc project ${OPENSHIFT_PROJECT}"
                    echo "Logged into OpenShift project: ${OPENSHIFT_PROJECT}"
                }
            }
        }

        stage('Apply OpenShift Resources') {
            steps {
                script {
                    // Aplica los recursos de OpenShift (ImageStream, BuildConfig, Service, DeploymentConfig, Route).
                    // Esto creará o actualizará los recursos necesarios en OpenShift.
                    // Los archivos YAML se deben colocar en el mismo directorio que el Jenkinsfile o en una ruta accesible.
                    sh "oc apply -f openshift/image-stream.yaml -n ${OPENSHIFT_PROJECT}"
                    sh "oc apply -f openshift/build-config.yaml -n ${OPENSHIFT_PROJECT}"
                    sh "oc apply -f openshift/service.yaml -n ${OPENSHIFT_PROJECT}"
                    sh "oc apply -f openshift/deployment-config.yaml -n ${OPENSHIFT_PROJECT}"
                    sh "oc apply -f openshift/route.yaml -n ${OPENSHIFT_PROJECT}"
                    echo "OpenShift resources applied."
                }
            }
        }

        stage('Start OpenShift Build') {
            steps {
                script {
                    // Inicia un nuevo build en OpenShift usando el BuildConfig creado.
                    // La fuente para el build será el directorio 'skeleton/app/publish' que contiene la aplicación publicada.
                    // Esto empujará el contenido de 'publish' al contexto de build de OpenShift.
                    sh "oc start-build ${APP_NAME} --from-dir=skeleton/app/publish --follow -n ${OPENSHIFT_PROJECT}"
                    echo "OpenShift build started and completed for ${APP_NAME}."
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    // Opcional: Espera a que el DeploymentConfig se despliegue completamente.
                    // Esto asegura que la nueva versión de la aplicación esté disponible.
                    sh "oc rollout status dc/${APP_NAME} -n ${OPENSHIFT_PROJECT}"
                    echo "Deployment for ${APP_NAME} is complete."

                    // Opcional: Obtener la URL de la ruta (Route) para acceder a la aplicación.
                    def routeUrl = sh(script: "oc get route ${APP_NAME} -o jsonpath='{.spec.host}' -n ${OPENSHIFT_PROJECT}", returnStdout: true).trim()
                    echo "Application URL: http://${routeUrl}"
                }
            }
        }
    }

    post {
        always {
            // Pasos que se ejecutan siempre al finalizar el pipeline (éxito o fallo).
            cleanWs() // Limpia el espacio de trabajo del agente de Jenkins.
        }
        failure {
            echo "Pipeline failed. Check logs for details."
            // Aquí puedes añadir notificaciones (email, Slack, etc.)
        }
        success {
            echo "Pipeline completed successfully!"
        }
    }
}
